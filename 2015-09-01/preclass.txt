## Reading questions

The first two questions are questions from last time, but worth
revisiting.  These are up rather late, but do what you can, and come
with questions for class!

1.  The class cluster consists of eight nodes and fifteen Xeon Phi
    accelerator boards.  Based on an online search for information on
    these systems, what do you think is the theoretical peak flop rate
    (double-precision floating point operations per second)?  Show how
    you computed this, and give URLs for where you got the parameters
    in your calculation.  (We will return to this question again after
    we cover some computer architecture.)

 - 8 DP SIMD Lane * 2 FMA * 1.053 GHz * 60 cores * 15 Xeon Phi accelerator boards = 15.1 TFLOP/sec
- For E-2620:
4 FMA/cycle * 2 flops/FMA * 6 cores * 2.4 GHz clock * (8 nodes * 12 xeons in cluster) = 11.06 Teraflops/sec.

Therefore,
Total peak flop rate for the cluster = 15.1 Tflops/sec + 11.06 Tflops/sec = 26.16 Tflops/sec
    
2.  What is the approximate theoretical peak flop rate for your own machine?

- 8 DP SIMD Lane * 2 FMA * 3.1 GHz * 2 cores = 99.2 GFLOP/sec

3.  Suppose there are t tasks that can be executed in a pipeline
    with p stages.  What is the speedup over serial execution of the
    same tasks?

- Speedup = time taken for serial execution / pipelined execution time = t*p / (p + (t-1))

4.  Consider the following list of tasks (assume they can't be pipelined):

      compile GCC (1 hr)
      compile OpenMPI (0.5 hr) - depends on GCC
      compile OpenBLAS (0.25 hr) - depends on GCC
      compile LAPACK (0.5 hr) - depends on GCC and OpenBLAS
      compile application (0.5 hr) - depends on GCC, OpenMPI,
        OpenBLAS, LAPACK

    What is the minimum serial time between starting to compile and having
    a compiled application?  What is the minimum parallel time given
    an arbitrary number of processors?

- Serial time to compile application = sum of all times = 2.75 hr
- Parallel time = 1hr GCC + max(0.5 hr OpenMPI, 0.25 hr OpenBLAS + 0.5 hr LAPACK = 0.75 hr parallel execution) + 0.5 hr Application = 1 + 0.75 + 0.5 = 2.25 hr 

5.  Clone the membench repository from GitHub:

       git clone git@github.com:cornell-cs5220-f15/membench.git

    On your own machine, build `membench` and generate the associated
    plots; for many of you, this should be as simple as typing `make`
    at the terminal (though I assume you have Python with pandas and
    Matplotlib installed; see also the note about Clang and OpenMP
    in the leading comments of the Makefile).  Look at the output file
    timings-heat.pdf; what can you tell about the cache architecture
    on your machine from the plot?

- For small size of array, longer strides dontâ€™s matter since set associative caches accommodate almost all array elements.
- For larger array sizes, cache hits keep reducing with increase in strides and reaches a worst case around the middle where maximum thrashing occurs when stride length causes memory load requests successively from addresses mapped to the same cache block.
- With further increase in stride length the successive memory loads are called from different cache blocks and thus this set associativity manages to reduce the thrashing.
- On my Macbook, observing from the heat map, worst performance occurs at a size of 32Mb with stride of 16Kb

6.  From the cloned repository, check out the totient branch:

       git checkout totient

    You may need to move generated files out of the way to do this.
    If you prefer, you can also look at the files on GitHub.  Either
    way, repeat the exercise of problem 5.  What can you tell about
    the cache architecture of the totient nodes?

- On the totient cluster, from size of around 1Mb, as the stride increases from 4Kb to around 32Kb, L1 cache misses start to occur.
- As size further increases to 32Mb, L2 misses occur, performance degrades and reaches its worst at around stride length of 1Mb and improves with further increase in stride length when subsequent memory reads being to map to different addresses in cache once again.

7.  Implement the following three methods of computing the centroid
    of a million two-dimensional coordinates (double precision).
    Time and determine which is faster:

    a.  Store an array of (x,y) coordinates; loop i and simultaneously
        sum the xi and yi

    b.  Store an array of (x,y) coordinates; loop i and sum the xi,
        then sum the yi in a separate loop

    c.  Store the xi in one array, the yi in a second array.
        Sum the xi, then sum the yi.

    I recommend doing this on the class cluster using the Intel
    compiler.  To do this, run "module load cs5220" and run (e.g.)

        icc -o centroid centroid.c

- On my Macbook pro, using gcc-5 the results were as follows:
Result: 1.07382e+09 1.07378e+09
Version 1: 5.426903e-02 (0.737069 GFLop/s)
Result: 1.07382e+09 1.07378e+09
Version 2: 1.085975e-01 (0.368333 GFLop/s)
Result: 1.07383e+09 1.07378e+09
Version 3: 1.074798e-01 (0.372163 GFLop/s)

-On the totient cluster, using gcc, the results were as follows:
Result: 1.07382e+09 1.07378e+09
Version 1: 7.970383e-02 (0.501858 GFLop/s)
Result: 1.07382e+09 1.07378e+09
Version 2: 1.620265e-01 (0.246873 GFLop/s)
Result: 1.07383e+09 1.07378e+09
Version 3: 1.481528e-01 (0.269992 GFLop/s)

-On the totient cluster, using icc, the results were as follows:
Result: 1.07382e+09 1.07378e+09
Version 1: 7.846949e-02 (0.509752 GFLop/s)
Result: 1.07382e+09 1.07378e+09
Version 2: 1.672213e-01 (0.239204 GFLop/s)
Result: 1.07383e+09 1.07378e+09
Version 3: 1.446554e-01 (0.276519 GFLop/s)



